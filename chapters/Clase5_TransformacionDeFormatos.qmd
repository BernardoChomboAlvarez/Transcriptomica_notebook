---
title: "Transformación de formatos | feature counts | creación de pileups"
subtitle: "Licenciatura en Ciencias Genómicas, Transcriptómica, Semestre 2025-2"
description: "Clase 5 – Análisis bioinformático: Transformación de formatos, feature counts, creación de pileups"
author:
- Bernardo Chombo Álvarez
- David Valle García
date: last-modified
format:
  html:
    self-contained: true
    toc: true
    toc-expand: true
    toc-depth: 4
    theme: flatly
    highlight-style: monokai
    code-fold: false
    code-overflow: scroll
    code-block-border-left: "#31BAE9"
    code-block-bg: "#011627"
    page-layout: article
    fig-align: center
    df-print: paged
    code-line-numbers: true
    code-copy: false
    css: ../css/styles.css
execute: 
  eval: true
  echo: true
  warning: false
  include: true
  error: false
  message: false
fontsize: 11pt
editor: visual
mainfont: Calibri
sansfont: Calibri
monofont: Calibri
knitr:
  opts_chunk:
    comment: "##"
  opts_knit:
    kable: true
---

## 1. Transformar formatos

Para transformar formatos se emplean las herramientas de *SamTools*. Para ello hay que entender el contenido de una entrada de un archivo .sam (Sequence Alignment/Map)

<img src="../images/SAM_entry.png" alt="Description of image" width="700px"/>

Las Flags en un archivo .sam son importantes porque permiten identificar si las lecturas están correctamente alineadas, si son parte de un experimento *paired-end*, la posición de la cadena, identificar lecturas duplicadas o de baja calidad, entre otras.

Las flags se interpretan como una suma de potencias de 2, donde cada bit tiene un significado específico.

| Valor del bit |               Significado                |
|:-------------:|:----------------------------------------:|
|       1       | La lectura está emparejada (paired-end). |
|       2       | Ambas lecturas del par están alineadas.  |
|       4       |       La lectura no está alineada.       |
|       8       |       Su pareja no está alineada.        |
|      16       |  La lectura está en la cadena inversa.   |
|      32       |   Su pareja está en la cadena inversa.   |
|      64       |      Es la primera lectura del par.      |
|      128      |      Es la segunda lectura del par.      |
|      256      |          Alineación secundaria.          |
|      512      |            Lectura duplicada.            |
|     1024      |   Lectura no pasa filtros de calidad.    |

Siguiendo el ejemplo mostrado en la imagen, la flag es **147**, en binario es **10010011**, si lo descomponemos en bits activados, se ve de la siguiente forma:

| Bit  | Value | Significance                                     | State         |
|--------------|--------------|-------------------------------|--------------|
| 1    | 1     | Lectura emparejada (*paired-end*).               | **Activated** |
| 2    | 2     | Ambas lecturas del par están alineadas.          | **Activated** |
| 4    | 4     | La lectura no está alineada.                     | Not activated |
| 8    | 8     | Lectura par no está alineada.                    | Not activated |
| 16   | 16    | Lectura en la cadena inversa (*reverse strand*). | **Activated** |
| 32   | 32    | Su pareja está en la cadena inversa.             | **Activated** |
| 64   | 64    | Es la primera lectura del par.                   | Not activated |
| 128  | 128   | Es la segunda lectura del par.                   | **Activated** |
| 256  | 256   | Alineación secundaria.                           | Not activated |
| 512  | 512   | Lectura duplicada.                               | Not activated |
| 1024 | 1024  | Lectura no pasa filtros de calidad.              | Not activated |

### 1.1 Samtools

Es necesario convertir el formato .sam a .bam debido a que el formato .sam es muy pesado y ocupa muchos recursos de memoria.

[Manual Samtools](https://www.htslib.org/doc/samtools.html)

-   `samtools view`: prints all alignments in the specified input alignment file to standard output
-   `samtools sort`: Sort alignments by leftmost coordinates
-   `samtools index`: Index coordinate-sorted BGZIP-compressed SAM, BAM or CRAM files for fast random access.

```{bash}
#| eval: false
## Run Samtools view
## Output result in BAM format and filter alignments >= 10 in quality score
samtools view -bSq 10 ${FILE}.sam | \
samtools sort --threads 5 -T ${FILE} -o ${FILE}.bam

## Run Samtools index
samtools index ${FILE}.bam

## Run Samtools view again
samtools view -c ${FILE}.bam

## Remove .sam file
rm ${FILE}.sam
```

### 1.2 Deeptools

También se puede usar el software *Deeptools*. Este es una suite de python desarrollado particularmente para análisis de secuenciación masiva como *ChIP-seq, RNA-seq o MNase-seq*.

[Manual Deeptools](https://deeptools.readthedocs.io/en/develop/)

#### 1.2.1 Instalación

**Conda**

```{bash}
#| eval: false
conda install -c conda-forge -c bioconda deeptools

## DO NOT RUN
CONDA_SUBDIR=osx-64 conda create -c conda-forge -c bioconda -n deeptools deeptools
```

**Pip**

```{bash}
#| eval: false
pip install deeptools

## Or specific version
pip install deeptools==3.5.3

## Or development version
git clone https://github.com/deeptools/deepTools.git
cd deepTools
pip install .
```

#### 1.2.2 bamCoverage

The output in bigwig format can be visualized in thre UCSC Genome Browser

-   `--filterRNAstrand`: option assumes the sequencing library generated from ILLUMINA dUTP/NSR/NNSR methods (forward, reverse).
-   `-p`: number of cores
-   `-b`: path/to/BAM_file.bam
-   `-o`: /path/to/output_file
-   `-of`: output format (bigwig, bedgraph)
-   `-bs`: size of the bins, in bases, for the output of the bigwig/bedgraph file. (Default: 50)
-   `--blackListFileName`: a BED or GTF file containing regions that should be excluded from all analyses.
-   `--normalizeUsing`: possible choices: RPKM, CPM, BPM, RPGC, None
-   `--skipNAs`: this parameter determines if non-covered regions (regions without overlapping reads) in a BAM file should be skipped.
-   `--ignoreDuplicates`: if set, reads that have the same orientation and start position will be considered only once. If reads are paired, the mate’s position also has to coincide to ignore a read.
-   `--samFlagInclude`: include reads based on the SAM flag.

[bamCoverage Manual](https://deeptools.readthedocs.io/en/develop/content/tools/bamCoverage.html)

**Standard RNA-seq**

```{bash}
#| eval: false
bamCoverage -b a.bam -o a.bw
```

**Stranded *single-end* library**

```{bash}
#| eval: false
## Forward strand
bamCoverage -b a.bam -o a.fwd.bw --samFlagExclude 16

## Reverse strand
bamCoverage -b a.bam -o a.rev.bw --samFlagInclude 16
```

**Transcripts from the forward strand**

```{bash}
#| eval: false
## Include reads that are 2nd in a pair (128)
## Include reads that are mapped to the reverse strand (16)
samtools view -b -f 128 -F 16 a.bam > a.fwd1.bam

## Exclude maps that are mapped to the reverse strand (16) and
## first in a pair (64): 80
samtools view -b -f 80 a.bam > a.fwd2.bam

## Combine the temporary files
samtools merge -f fwd.bam a.fwd1.bam a.fwd2.bam

## index the filtered BAM file
samtools index fwd.bam

## run bamCoverage
bamCoverage -b fwd.bam -o a.fwd.bigWig

## remove the temporary file
rm a.fwd*.bam
```

**Transcripts from the reverse strand**

```{bash}
#| eval: false
## Include reads that are 2nd in a pair (128)
## and are second in a pair (16): 144
samtools view -b -f 144 a.bam > a.rev1.bam

## Include maps that are mfirst in a pair (64), but
## exclude those ones that map to the reverse strand (16)
samtools view -b -f 64 -F 16 a.bam > a.rev2.bam

## Combine the temporary files
samtools merge -f rev.bam a.rev1.bam a.rev2.bam

## index the filtered BAM file
samtools index rev.bam

## run bamCoverage
bamCoverage -b rev.bam -o a.rev.bw

## remove the temporary file
rm a.rev*.bam
```

### 1.3 Feature Counts

Se pude usar `featureCounts` vía línea de comandos o con R.

#### 1.3.1 Instalación

Se pude descargar desde la SourceForge: <https://sourceforge.net/projects/subread/files/subread-2.0.8/>. Para windows se puede ddescargar le instalador o en Linux se necesita compilar usando make

```{bash}
#| eval: false
tar zxvf subread-1.x.x.tar.gz
make -f Makefile.Linux
```

Para la instalación de `Rsubread` en R se necesita tener instalado BioConductor e instalar `Rsubread` vía `BiocManager`.

```{r}
#| eval: false
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("Rsubread")
```

[Rsubread Manual](https://bioconductor.org/packages/release/bioc/manuals/Rsubread/man/Rsubread.pdf)

#### 1.3.2 Gene Counts

**Command Line**

Summarize a single-end read dataset using 5 thread

```{bash}
#| eval: false
featureCounts -T 5 -t exon -g gene_id -a annotation.gtf -o counts.txt mapping_results_SE.sam
```

Summarize a BAM format dataset

```{bash}
#| eval: false
featureCounts -t exon -g gene_id -a annotation.gtf -o counts.txt mapping_results_SE.bam
```

Summarize multiple datasets at the same time

```{bash}
#| eval: false
featureCounts -t exon -g gene_id -a annotation.gtf -o counts.txt library1.bam library2.bam library3.bam
```

Perform strand-specific read counting (use '-s 2' if reversely stranded)

```{bash}
#| eval: false
featureCounts -s 1 -t exon -g gene_id -a annotation.gtf -o counts.txt mapping_results_SE.bam
```

Summarize paired-end reads and count fragments (instead of reads)

```{bash}
#| eval: false
featureCounts -p --countReadPairs -t exon -g gene_id -a annotation.gtf -o counts.txt mapping_results_PE.bam
```

Summarize multiple paired-end datasets

```{bash}
#| eval: false
featureCounts -p --countReadPairs -t exon -g gene_id -a annotation.gtf -o counts.txt library1.bam library2.bam library3.bam
```

Count the fragments that have fragment length between 50bp and 600bp only

```{bash}
#| eval: false
featureCounts -p --countReadPairs -P -d 50 -D 600 -t exon -g gene_id -a annotation.gtf -o counts.txt mapping_results_PE.bam
```

Count those fragments that have both ends mapped only

```{bash}
#| eval: false
featureCounts -p --countReadPairs -B -t exon -g gene_id -a annotation.gtf -o counts.txt mapping_results_PE.bam
```

Exclude chimeric fragments from fragment counting

```{bash}
#| eval: false
featureCounts -p --countReadPairs -C -t exon -g gene_id -a annotation.gtf -o counts.txt mapping_results_PE.bam
```

**R**

Summarize a single-end read dataset using 5 thread

```{r}
#| eval: false
library(Rsubread)
featureCounts(
  files = "mapping_results_SE.sam",
  annot.ext = "annotation.gtf",
  isGTFAnnotationFile = TRUE,
  GTF.featureType = "exon",
  GTF.attrType = "gene_id",
  nthreads = 5,
  strandSpecific = 0,
  isPairedEnd = FALSE
)
```

Summarize a BAM format dataset

```{r}
#| eval: false
featureCounts(
  files = "mapping_results_SE.bam",
  annot.ext = "annotation.gtf",
  isGTFAnnotationFile = TRUE,
  GTF.featureType = "exon",
  GTF.attrType = "gene_id",
  nthreads = 1,
  strandSpecific = 0,
  isPairedEnd = FALSE
)
```

Summarize multiple datasets at the same time

```{r}
#| eval: false
featureCounts(
  files = c("library1.bam", "library2.bam", "library3.bam"),
  annot.ext = "annotation.gtf",
  isGTFAnnotationFile = TRUE,
  GTF.featureType = "exon",
  GTF.attrType = "gene_id",
  nthreads = 1,
  strandSpecific = 0,
  isPairedEnd = FALSE
)
```

Perform strand-specific read counting (use '-s 2' if reversely stranded)

```{r}
#| eval: false
featureCounts(
  files = "mapping_results_SE.bam",
  annot.ext = "annotation.gtf",
  isGTFAnnotationFile = TRUE,
  GTF.featureType = "exon",
  GTF.attrType = "gene_id",
  nthreads = 1,
  strandSpecific = 1,
  isPairedEnd = FALSE
)
```

Summarize paired-end reads and count fragments (instead of reads)

```{r}
#| eval: false
featureCounts(
  files = "mapping_results_PE.bam",
  annot.ext = "annotation.gtf",
  isGTFAnnotationFile = TRUE,
  GTF.featureType = "exon",
  GTF.attrType = "gene_id",
  nthreads = 1,
  strandSpecific = 0,
  isPairedEnd = TRUE
)
```

Summarize multiple paired-end datasets

```{r}
#| eval: false
featureCounts(
  files = c("library1.bam", "library2.bam", "library3.bam"),
  annot.ext = "annotation.gtf",
  isGTFAnnotationFile = TRUE,
  GTF.featureType = "exon",
  GTF.attrType = "gene_id",
  nthreads = 1,
  strandSpecific = 0,
  isPairedEnd = TRUE
)
```

Count the fragments that have fragment length between 50bp and 600bp only

```{r}
#| eval: false
featureCounts(
  files = "mapping_results_PE.bam",
  annot.ext = "annotation.gtf",
  isGTFAnnotationFile = TRUE,
  GTF.featureType = "exon",
  GTF.attrType = "gene_id",
  nthreads = 1,
  strandSpecific = 0,
  isPairedEnd = TRUE,
  minFragLength = 50,
  maxFragLength = 600
)
```

Count those fragments that have both ends mapped only

```{r}
#| eval: false
featureCounts(
  files = "mapping_results_PE.bam",
  annot.ext = "annotation.gtf",
  isGTFAnnotationFile = TRUE,
  GTF.featureType = "exon",
  GTF.attrType = "gene_id",
  nthreads = 1,
  strandSpecific = 0,
  isPairedEnd = TRUE,
  requireBothEndsMapped = TRUE
)
```

Exclude chimeric fragments from fragment counting

```{r}
#| eval: false
featureCounts(
  files = "mapping_results_PE.bam",
  annot.ext = "annotation.gtf",
  isGTFAnnotationFile = TRUE,
  GTF.featureType = "exon",
  GTF.attrType = "gene_id",
  nthreads = 1,
  strandSpecific = 0,
  isPairedEnd = TRUE,
  countChimericFragments = FALSE
)
```

Alternativamente se puede emplear `htseq-count` para los cuales el manual se puede encontrar en el siguiente link: [Manual htseq-count](https://htseq.readthedocs.io/en/release_0.11.1/count.html).

<br>

## Referencias

-   <https://htseq.readthedocs.io/en/release_0.11.1/count.html>

-   <https://bioconductor.org/packages/release/bioc/manuals/Rsubread/man/Rsubread.pdf>
